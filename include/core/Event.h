#pragma once

#include "config/Export.h"

#include <cstdint>
#include <variant>

namespace dagui
{
	class Widget;

	enum ButtonMask
	{
		BUTTON_NONE,
		BUTTON_PRIMARY = 1<<0,
		BUTTON_SECONDARY = 1<<1,
		BUTTON_MIDDLE = 1<<2
	};

	struct DAGUI_API PointerEvent
	{
		std::int32_t x{ 0 };
		std::int32_t y{ 0 };
		ButtonMask buttons{ BUTTON_NONE };
	};

	//! A key press/release event
	struct DAGUI_API KeyEvent
	{
		std::uint32_t code{ 0 };
	};

	struct DAGUI_API WidgetEvent
	{
		Widget* widget{ nullptr };
	};

	//! An occurrence that has already happened.
	//! Immutable once created.
	class DAGUI_API Event
	{
	public:
		using ContentType = std::variant<PointerEvent, KeyEvent, WidgetEvent>;
		enum Type : std::uint32_t
		{
			//! An unknown event
			TYPE_UNKNOWN,
			//! Generated when a pointing device moves
			TYPE_POINTER_MOVE,
			//! Generated when a button is pressed
			TYPE_BUTTON_PRESS,
			//! Generated when a button is released
			TYPE_BUTTON_RELEASE,
			//! Generated by a sequence of press then release of the same button
			TYPE_BUTTON_CLICK,
			//! Generated by pressing a key
			TYPE_KEY_PRESS,
			//! Generated by releasing a key
			TYPE_KEY_RELEASE,
			//! Generated by a pointer entering the bounds of a Widget
			TYPE_ENTER_WIDGET,
			//! Generated by a pointer leaving the bounds of a Widget
			TYPE_LEAVE_WIDGET
		};
	public:
		Event(Type type, ContentType data);

		Type type() const
		{
			return _type;
		}

		const ContentType& data() const
		{
			return _data;
		}

		static const char* typeToString(Type value);

		static Type parseType(const char* str);
	private:
		Type _type{ TYPE_UNKNOWN };
		
		ContentType _data;
	};
}
